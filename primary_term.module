<?php

// $Id$

/**
 * @TODO
 * - add a validate function to the form_alter
 */

function primary_term_nodeapi(&$node, $op, $teaser, $page) {
  // This module sets $node->primary_term on node load but
  // $node->primaryterm via the node form.  I don't know if a previous
  // author meant that or if it was a mistake.  For now, the module
  // preserves that behavior.

  switch ($op){
    case 'submit':
      // Make sure the PT is assigned to the node as a normal term.
      //
      // taxonomy_node_save() allows $node->taxonomy to contain tids,
      // term objects, or arrays of tids (keyed by vocabulary).  So,
      // we can add the PT tid to the end of the array.
      //
      // However, taxonomy_node_save() assumes that a given tid only
      // occurs once anywhere in node->taxonomy(), so we have to make
      // sure the PT tid is not already assigned via the form to this
      // node before adding it.
      //
      // In the end, this is more work than doing it "wrong" during
      // insert/update.
      if (!empty($node->primaryterm)) {
        $tid = $node->primaryterm;
      } else if (!empty($node->primary_term)) {
        $tid = $node->primary_term->tid;
      }
      if (!empty($tid)) {
        foreach ($node->taxonomy as $k => $v) {
          if (is_array($v) && !empty($v[$tid])) {
            return;
          } else if (is_numeric($v) && $v == $tid) {
            return;
          }
        }
        $node->taxonomy[] = $tid;
      }
      break;
    
    case 'insert':
    case 'update':
      db_query('DELETE FROM {primary_term} WHERE vid = %d', $node->vid); // only one term per node revision
      // When node form is submitted, the new PT tid comes in as
      // $node->primaryterm (because it is set as
      // $form['taxonomy']['primaryterm'] but with #tree => false.  If
      // it is comes directly from node_load(), the PT term object is
      // in $node->primary_term.
      if (!empty($node->primaryterm)) {
        $primaryterm = $node->primaryterm;
      } else if (!empty($node->primary_term)) {
        $primaryterm = $node->primary_term->tid;
      }
      if (empty($primaryterm)) {
        break;
      }

      db_query('INSERT INTO {primary_term} (vid, tid) VALUES (%d, %d)', $node->vid, $primaryterm);
      break;

    case 'load':
      $tid = db_result(db_query('SELECT tid FROM {primary_term} WHERE vid = %d', $node->vid));
      $term = taxonomy_get_term($tid);
      $node->primary_term = $term;
      break;
  }
}

function primary_term_form_alter($form_id, &$form) { 
  $type = $form['type']['#value'];
  $node = $form['#node'];

  switch ($form_id) {
    case $type .'_node_form':
  
      if ($vids = variable_get('pt_vocabs_'. $form['type']['#value'], array())) {
        
        // go through all taxonomy terms for this type:
        $terms = array();
        if(is_array($form['taxonomy'])){
          foreach($form['taxonomy'] as $vid => $vocab){
            if(in_array($vid, $vids)){
              if(is_array($vocab['#options'])){
                if(strlen(trim($vocab['#options']))){
                  // not sure why we have the line below. from old days.
                  // unset($vocab['#options'][0]);
                }
                $terms = $terms + $vocab['#options'];
              }
            }
          }
        }
        
        // stick a <none> value on the front of the array
        array_unshift($terms, t('<none>'));
        $types = node_get_types('names');
        $type = $types[$node->type];
        
        // create a new field
        $form['taxonomy']['primaryterm'] = array(
          '#type' => 'select',
          '#multiple' => 0,
          '#title' => t('Primary Category'),
          '#default_value' => array(primary_term_get_term($form['#node']->vid)),
          '#options' => $terms,
          '#description' => t('Select a primary category for this %type.', array('%type' => $type)),
          '#theme' => 'taxonomy_term_select',
          '#required' => FALSE,
          '#weight' => -4,
          '#tree' => FALSE, // keep value out of $node->taxonomy
          );
      }
      break;
  
  
  case 'node_type_form':
    $node_type = $form['old_type']['#value'];
    $vocabs = taxonomy_get_vocabularies($type);
    foreach($vocabs as $vocab){
      $vocabularies[$vocab->vid] = $vocab->name;
    }
    
    $form['workflow']['pt_vocabs'] = array(
      '#type' => 'checkboxes',
      '#title' => t('Vocabularies for Primary Term'),
      '#options' => $vocabularies,
      '#default_value' => variable_get('pt_vocabs_'. $node_type, array()),
      '#description' => t('Select which vocabularies should contribute terms to the Primary Category selector. Select none and the selector will not appear.'),
    );
    
    
    
  }  
}

/**
 * Get primary term for a given node version id (vid)
 *
 * @param integer $vid
 */
function primary_term_get_term($vid){
  return db_result(db_query('SELECT tid FROM {primary_term} WHERE vid = %d', $vid));
}

/**********************************************************************
 * token.module support
 **********************************************************************/

function primary_term_token_list($type = 'all') {
  if ($type == 'node' || $type == 'all') {
    $tokens['node']['primary-term'] = t('Name of primary term');
    $tokens['node']['primary-term-id'] = t('ID of primary term');
    return $tokens;
  }
}

function primary_term_token_values($type, $object = NULL) {
  switch ($type) {
    case 'node':
      $node = $object;
      $values['primary-term'] = check_plain($node->primary_term->name);
      $values['primary-term-id'] = $node->primary_term->tid;
      break;
  }
  return $values;
}

/**********************************************************************
 * Views support
 **********************************************************************/

function primary_term_views_tables() {
  $tables['primary_term'] = array(
    'name' => 'primary_term',
    'join' => array('left' => array('table' => 'node', 'field' => 'vid'),
      'right' => array('field' => 'vid')),
    'fields' => array(
      'tid' => array(
        'name' => t('Primary Term'),
        'handler' => 'primary_term_views_handler_field_tid',
        'addlfields' => array('tid'),
        'help' => t('This will display the name of the Primary Term of the node.'),
        ),
      ),
    'sorts' => array(
      'tid' => array(
        'name' => t('Primary Term'),
        ),
      ),
    'filters' => array(
      'tid' => array(
        'name' => t('Primary Term'),
        'operator' => 'views_handler_operator_andor',
        'list' => 'views_handler_filter_tid',
        'value-type' => 'array',
        'help' => t('Filter by the node\'s Primary Term.'),
        )
      )
    );
  return $tables;
}

function primary_term_views_arguments() {
  $arguments = array(
    'primary_term' => array(
      'name' => t('Primary Term'),
      'handler' => 'primary_term_views_handler_arg_tid',
      'help' => t('Filter by the node\'s Primary Term.'),
      ),
    );
  return $arguments;
}

/**
 * Display a link to a primary term
 */
function primary_term_views_handler_field_tid($fieldinfo, $fielddata, $value, $data) {
  $fieldname = $fielddata['tablename'] . '_tid';
  $term = taxonomy_get_term($data->$fieldname);
  $path = taxonomy_term_path($term);
  return l($term->name, $path);
}

/**
 * Implement Primary Term as an argument
 */
function primary_term_views_handler_arg_tid($op, &$query, $argtype, $arg = '') {
  switch($op) {
    case 'summary':
      $query->ensure_table('primary_term');
      $fieldinfo['field'] = "primary_term.tid";
      return $fieldinfo;
    case 'sort':
      $query->add_orderby('primary_term', 'tid', $argtype);
      break;
    case 'filter':
      if ($arg == 0) { // untagged only!
        $query->ensure_table("primary_term");
        $query->add_where("primary_term.tid IS NULL");
      } else {
        $query->ensure_table("primary_term");
        $args = _views_break_phrase($arg);
        if ($args[0] == 'and') {
          $operator = $argtype['options'] ? '!=' : '=';
          foreach ($args[1] as $arg) {
            $query->add_where("primary_term.tid $operator %d", $arg);
          }
        }
        else {
          $query->add_where("primary_term.tid IN (%s)", implode(',', $args[1]));
        }
      }
      break;

    case 'link':
      if (!empty($query->primary_term_tid)) {
        $term = taxonomy_get_term($query->primary_term_tid);
        return l($term->name, "$arg/" . intval($term->tid));
      } else {
        return l(t('No Primary Term'), "$arg/0");
      }
    case 'title':
      return 'unsupported';

      if (!$query) {
        return t('Uncategorized');
      }
      list($type, $info) = _views_break_phrase($query);
      if (!$info) {
        return t('Uncategorized');
      }
      $tids = implode(',', $info); // only does numbers so safe

      $result = db_query("SELECT name FROM {term_data} WHERE tid IN (%s)", $tids);
      while ($term = db_fetch_object($result)) {
        $title .= ($title ? ($type == 'or' ? ' + ' : ', ') : '') . check_plain($term->name);
      }
      return $title;
  }
}
